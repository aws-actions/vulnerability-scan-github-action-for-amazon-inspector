import base64
import json
import os
import unittest
import zlib

from entrypoint import orchestrator


# note: make sure your IDE has its
# working directory set to:
# /path/to/amazon-inspector-github-actions-plugin/entrypoint

class TestOrchestrator(unittest.TestCase):

    def test_get_vuln_counts(self):
        # verify we can successfully parse all known-valid Inspector scans
        test_dir = "tests/test_data/scans/"
        file_list = os.listdir(test_dir)
        for file in file_list:
            path = os.path.join(test_dir, file)
            succeeded = orchestrator.get_vuln_counts(path)
            self.assertTrue(succeeded)

        # verify our vuln counts are correct
        succeeded, total, criticals, highs, mediums, lows, others = orchestrator.get_vuln_counts(
            "tests/test_data/scans/alpine:3.18.2.json.scan")
        self.assertTrue(succeeded)
        self.assertEqual(criticals, 1)
        self.assertEqual(highs, 1)
        self.assertEqual(mediums, 6)
        self.assertEqual(lows, 0)
        self.assertEqual(others, 0)
        self.assertEqual(total, criticals + highs + mediums + lows + others)

    def test_get_summarized_findings(self):
        # print summarized findings for convenience
        criticals = highs = mediums = lows = others = 10
        total = criticals + highs + mediums + lows + others
        findings = orchestrator.get_summarized_findings("container", "alpine:3.18.2",
                                                        total, criticals, highs,
                                                        mediums, lows, others)
        print(findings)

    def test_thresholds(self):
        criticals = highs = mediums = lows = others = 10
        threshold_exceeded = orchestrator.exceeds_threshold(criticals, 1,
                                                            highs, 1,
                                                            mediums, 1,
                                                            lows, 1,
                                                            others, 1)
        self.assertTrue(threshold_exceeded)

        criticals = highs = mediums = lows = others = 0
        threshold_exceeded = orchestrator.exceeds_threshold(criticals, 0,
                                                            highs, 0,
                                                            mediums, 0,
                                                            lows, 0,
                                                            others, 0)
        self.assertFalse(threshold_exceeded)

    def test_compress_encode_file(self):
        plaintext = ""
        test_file = "tests/test_data/scans/alpine:3.18.2.json.scan"
        with open(test_file, "r") as f:
            plaintext = f.read()

        encoded_text = orchestrator.compress_encode_file(test_file)
        decoded = base64.b64decode(encoded_text)
        decoded = zlib.decompress(decoded)
        self.assertEqual(plaintext, decoded.decode('utf-8'))


    def test_inspector_scan(self):
        src = "tests/test_data/sboms/alpine:3.18.2.json"
        dst = "/tmp/inspector_scan_alpine.3.18.2.json"
        ret = orchestrator.invoke_inspector_scan(src, dst)
        self.assertEqual(ret, 0)

if __name__ == "__main__":
    unittest.main()
