import json


class DockerfileVulnerability:
    def __int__(self):
        vuln_id: str = ""
        severity: str = ""
        description: str = ""
        filepath = ""
        lines = ""


def is_inspector_cyclonedx_scan(inspector_scan_json: str) -> bool:
    as_json = json.loads(inspector_scan_json)
    key = "bomFormat"
    value = as_json.get(key)
    if value == "CycloneDX":
        return True

    return False


def is_cyclonedx_json_v1_5(inspector_scan_json: str) -> bool:
    as_json = json.loads(inspector_scan_json)
    key = "specVersion"
    value = as_json.get(key)
    if value == "1.5":
        return True

    return False


def are_components_present(inspector_scan_json: str) -> bool:
    as_json = json.loads(inspector_scan_json)
    key = "components"
    value = as_json.get(key)
    if not value:
        return False

    return True


def are_vulnerabilities_present(inspector_scan_json: str) -> bool:
    as_json = json.loads(inspector_scan_json)
    key = "vulnerabilities"
    value = as_json.get(key)
    if not value:
        return False

    return True


# TODO: make sure vuln counts are added to tally
# TODO: post Dockerfile findings as job summary
# TODO: add table of contents to markdown report
# TODO: append Dockerfile findings to CSV

"""
JSON parsing process:

1. [+] if bomFormat != CycloneDX
    return error

2. [+] if specVersion != 1.5
        return error

3. [+] if len(components) not > 0
        return no components error

4. if len(vulnerabilities) not > 0
        return no vulns error
        
5. Get vulnerabilities object

6. for each vuln:
        get needed attributes
        add Dockerfile vuln object to a list
    return the list
    
7. transform vuln list to markdown

8. transform vuln list to CSV

9. 

"""
