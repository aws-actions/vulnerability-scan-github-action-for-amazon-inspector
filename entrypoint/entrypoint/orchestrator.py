"""
given action args:

if Linux:
    download and install sbomgen

else try to use the current system's sbomgen

invoke sbomgen with args
set sbomgen output

invoke aws cli to scan sbom
set aws cli output

if thresholds enabled:
    check thresholds

print final output

"""
import logging

from entrypoint import installer
from entrypoint import executor

import platform
import tempfile
import os
import shutil


def download_install_sbomgen(sbomgen_version: str) -> bool:
    cpu_arch = platform.machine()
    if "x86_64" in cpu_arch:
        cpu_arch = "amd64"

    elif "arm64" in cpu_arch:
        cpu_arch = "arm64"

    else:
        logging.error(f"expected a CPU architecture of x86_64, arm64, or amd64, but received: {cpu_arch}")
        return False

    # download sbomgen
    url = installer.get_sbomgen_url("Linux", cpu_arch, sbomgen_version)
    dst = tempfile.gettempdir()
    dst = os.path.join(dst, "inspector-sbomgen.zip")
    ret = installer.download_sbomgen(url, dst)
    if ret == "":
        return False

    # unzip sbomgen
    extracted_src = dst
    extracted_dst = os.path.join(tempfile.gettempdir(), "inspector-sbomgen")
    ret = installer.extract_sbomgen(extracted_src, extracted_dst)
    if ret == "":
        return False

    # find sbomgen ELF binary
    sbomgen_path = installer.find_file_in_dir("inspector-sbomgen", extracted_dst)
    if sbomgen_path == "":
        return False

    # install sbomgen
    install_dst = "/usr/local/bin/inspector-sbomgen"
    ret = installer.install_sbomgen(sbomgen_path, install_dst)
    if ret == "":
        return False

    installer.set_sbomgen_install_path(install_dst)
    return True


def invoke_sbomgen(args) -> int:
    sbomgen = installer.get_sbomgen_install_path()

    path_arg = ""
    if args.artifact_type.lower() == "repository":
        args.artifact_type = "directory"
        path_arg = "--path"

    elif "container" in args.artifact_type.lower():
        args.artifact_type = "container"
        path_arg = "--image"

    elif "binary" in args.artifact_type.lower():
        args.artifact_type = "binary"
        path_arg = "--image"

    elif "archive" in args.args.artifact_type.lower():
        args.artifact_type = "archive"
        path_arg = "--path"

    else:
        logging.error(f"expected artifact type to be 'repository', 'container', 'binary' or 'archive' but received {args.artifact_type}")
        return 1

    sbomgen_args = [args.artifact_type,
                    path_arg, args.artifact_path,
                    "--outfile", args.out_sbom,
                    "--disable-progress-bar"
                    ]
    ret = executor.invoke_command(sbomgen, sbomgen_args)
    return ret


def execute(args) -> bool:
    os_name = platform.system()
    if "Linux" in os_name:
        download_install_sbomgen(args.sbomgen_version)

    else:
        logging.warning(
            f"expected OS to be Linux, but our OS appears to be {os_name}; trying to use a local inspector-sbomgen binary as a fallback")
        path = shutil.which("inspector-sbomgen")
        if path is not None:
            installer.set_sbomgen_install_path(path)
        else:
            logging.error(
                "unable to find inspector-sbomgen; try downloading sbomgen for your platform and place in /usr/local/bin/inspector-sbomgen")
            return False

    ret = invoke_sbomgen(args)
    if ret != 0:
        logging.error("unable to generate SBOM with inspector-sbomgen")
        return False

    return True
