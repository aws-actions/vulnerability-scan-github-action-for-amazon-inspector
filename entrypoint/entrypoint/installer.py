import logging

"""
If downloading:
    1. get the correct URL
    2. download sbomgen
    3. extract sbomgen folder
    4. get path of sbomgen binary from extracted folder
    5. move sbomgen to a specific directory
    6. return absolute path to sbomgen

If overwrite:
    1. set path to sbomgen
"""


def get_sbomgen_url(os_name: str, cpu_arch: str, version: str = "latest") -> str:
    if os_name != "Linux":
        logging.error(f"expected os_name to be 'Linux' but received '{os_name}'")
        return ""

    valid_cpu_architectures = ['amd64', 'arm64']
    if cpu_arch not in valid_cpu_architectures:
        logging.error(f"expected cpu_arch to be one of {valid_cpu_architectures} but received '{cpu_arch}'")
        return ""

    if cpu_arch == "amd64":
        return f"https://amazon-inspector-sbomgen.s3.amazonaws.com/{version}/linux/amd64/inspector-sbomgen.zip"

    elif cpu_arch == "arm64":
        return f"https://amazon-inspector-sbomgen.s3.amazonaws.com/{version}/linux/arm64/inspector-sbomgen.zip"

    else:
        logging.error(f"expected cpu architecture to be either 'x86_64' or 'arm64' but received {cpu_arch}")
        return ""


def download_sbomgen(url, dst):
    return


def extract_sbomgen(src, dst):
    return


def find_sbomgen_binary(dir):
    return
