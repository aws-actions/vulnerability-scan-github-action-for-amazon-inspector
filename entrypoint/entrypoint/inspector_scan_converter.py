import urllib.parse


def getPropertyValueFromKey(vuln_json, key):
    props = vuln_json.get("properties")
    if props:
        for each_prop in props:
            name = each_prop.get("name")
            if name:
                if key == name:
                    value = each_prop.get("value")
                    if value:
                        return value
    return None


def vulns_to_obj(inspector_scan_json):
    vuln_list = []

    # check if the input has the fields we expect; anything without
    # these fields is assumed to be garbage and None is returned
    scan_contents = inspector_scan_json.get("sbom")
    if not scan_contents:
        return None

    components = scan_contents.get("components")
    if not components:
        return None

    vulns = scan_contents.get("vulnerabilities")
    if not vulns:
        return None

    for v in vulns:

        vuln = {
            "Vulnerability ID": "null",
            "Severity": "null",
            "Published": "null",
            "Modified": "null",
            "Description": "null",
            "EPSS Score": "null",
            "Package Installed Version": "null",
            "Package Fixed Version": "null",
            "Package Path": "null",
            "Exploit Available": "null",
            "Exploit Last Seen": "null",
            "CWEs": "null"
        }

        # get vuln ID
        id = v.get("id")
        if id:
            vuln["Vulnerability ID"] = id

        # get vuln severity
        ratings = v.get("ratings")
        if ratings:
            for rating in ratings:
                source = rating.get("source")
                if not source:
                    continue

                if source["name"] == "NVD":
                    severity = rating["severity"]
                    if severity:
                        vuln["Severity"] = severity

                elif source["name"] == "EPSS":
                    epss_score = rating["score"]
                    if epss_score:
                        vuln["EPSS Score"] = epss_score
                else:
                    continue

        # get vulnerability published date
        published = v.get("created")
        if published:
            vuln["Published"] = published

        # get vulnerability modified date
        modified = v.get("updated")
        if modified:
            vuln["Modified"] = modified

        # get vulnerability description
        description = v.get("description")
        if description:
            vuln["Description"] = description

        # get package URL from each affected component
        affected_package_urls = []
        affected_package_paths = []
        affected_bom_refs = v.get("affects")
        if affected_bom_refs:

            # get PURL from each affected bom-ref
            for each_bomref in affected_bom_refs:

                # iterate over components until we find
                # the affected bom-ref
                for each_component in components:
                    ref = each_component.get("bom-ref")
                    if ref:
                        # if this is the affected component
                        if ref == each_bomref["ref"]:
                            # we found the affected bom-ref, so get PURL
                            purl = each_component.get("purl")
                            if purl:
                                purl = urllib.parse.unquote(purl)
                                affected_package_urls.append(purl)
                            pkg_path = getPropertyValueFromKey(each_component, "amazon:inspector:sbom_scanner:path")
                            if pkg_path:
                                affected_package_paths.append(pkg_path)

        # combine all affected package urls into one string,
        # using a semicolon as delimiter, so this can
        # fit in one CSV cell.
        purl_str = ";".join(affected_package_urls)
        if purl_str == "":
            purl_str = "null"
        vuln["Package Installed Version"] = purl_str

        path_str = ";".join(affected_package_paths)
        if path_str == "":
            path_str = "null"
        vuln[""]

        # get fixed package
        fixed_versions = []
        props = v.get("properties")
        if props:
            for each_prop in props:
                prop_name = each_prop.get("name")
                if prop_name:
                    if "amazon:inspector:sbom_scanner:fixed_version:comp-" in prop_name:
                        fixed_version = each_prop.get("value")
                        if fixed_version:
                            fixed_versions.append(fixed_version)
                    else:
                        continue

        fixed_str = ";".join(fixed_versions)
        if fixed_str == "":
            fixed_str = "null"
        vuln["Package Fixed Version"] = fixed_str

        # get exploit available
        exploit_available = getPropertyValueFromKey(v, "amazon:inspector:sbom_scanner:exploit_available")
        if exploit_available:
            vuln["Exploit Available"] = exploit_available

        # get exploit last seen
        exploit_last_seen = getPropertyValueFromKey(v, "amazon:inspector:sbom_scanner:exploit_last_seen_in_public")
        if exploit_last_seen:
            vuln["Exploit Last Seen"] = exploit_last_seen

        # get CWEs
        cwe_list = []
        cwes = v.get("cwes")
        if cwes:
            for each_cwe in cwes:
                s = f"CWE-{each_cwe}"
                cwe_list.append(s)

        if len(cwe_list) > 0:
            cwe_str = ";".join(cwe_list)
            vuln["CWEs"] = cwe_str

        vuln_list.append(vuln)

    return vuln_list
