import base64
import logging
import os
import platform
import shutil
import subprocess
import sys
import tempfile
import zlib

import action_args
import downloader
import extractor
import finder


def get_sbomgen_url(os_name: str, cpu_arch: str) -> str:
    if os_name != "Linux":
        logging.error(f"expected OS to be Linux but received {os_name}")
        return ""

    if cpu_arch == "x86_64":
        return "https://amazon-inspector-sbomgen.s3.amazonaws.com/latest/linux/amd64/inspector-sbomgen.zip"

    elif cpu_arch == "arm64":
        return "https://amazon-inspector-sbomgen.s3.amazonaws.com/latest/linux/arm64/inspector-sbomgen.zip"

    else:
        logging.error(f"expected cpu architecture to be either 'x86_64' or 'arm64' but received {cpu_arch}")
        return ""


def install_sbomgen(install_path: str) -> bool:
    os_name = platform.system()
    cpu_arch = platform.machine()
    sbomgen_url = get_sbomgen_url(os_name, cpu_arch)
    if sbomgen_url == "":
        return False

    tmp_dir = tempfile.gettempdir()
    zip_name = "inspector-sbomgen.zip"
    path_to_sbomgen_zip = os.path.join(tmp_dir, zip_name)

    logging.info(f"downloading inspector-sbomgen from '{sbomgen_url}' to '{path_to_sbomgen_zip}'")
    result = downloader.download_file(sbomgen_url, path_to_sbomgen_zip)
    if not result:
        return False

    path_to_extracted_sbomgen_dir = os.path.join(tempfile.gettempdir(), "inspector-sbomgen")

    logging.info(f"extracting inspector-sbomgen.zip to {path_to_extracted_sbomgen_dir}")
    result = extractor.extract_zip_file(path_to_sbomgen_zip, path_to_extracted_sbomgen_dir)
    if not result:
        return False

    sbomgen_path = finder.find_file_in_dir("inspector-sbomgen", path_to_extracted_sbomgen_dir)
    if sbomgen_path == "":
        return False

    try:
        shutil.move(sbomgen_path, install_path)

        os.chmod(install_path, 0o500)  # read and execute permissions for owner

        logging.info("validating installation")
        command = ["inspector-sbomgen", "--version"]
        output = subprocess.run(command, capture_output=True, text=True)
        if output.returncode != 0:
            logging.error(output.stderr)
            return False
        else:
            logging.info(f"installation succeeded for inspector-sbomgen v{output.stdout.strip()}")

    except Exception as e:
        logging.error(e)
        return False


def get_path_argument() -> str:
    path_arg = ""
    if action_args.ARTIFACT_TYPE.lower() == "repository":
        action_args.ARTIFACT_TYPE = "directory"
        return "--path"

    elif action_args.ARTIFACT_TYPE.lower() == "binary":
        return "--path"

    elif action_args.ARTIFACT_TYPE.lower() == "archive":
        return "--path"

    elif action_args.ARTIFACT_TYPE.lower() == "container":
        return "--image"

    else:
        logging.error(
            f"expected artifact type to be 'repository', 'container', 'archive', or 'binary', but received {action_args.ARTIFACT_TYPE}")


def execute_sbomgen(sbomgen_path):
    path_arg = get_path_argument()

    logging.info("executing inspector-sbomgen to create software bill of materials from provided artifact")
    cmd = f"{sbomgen_path} {action_args.ARTIFACT_TYPE} {path_arg} {action_args.ARTIFACT_PATH} --disable-progress-bar -o {action_args.OUTPUT_SBOM_PATH}"
    os.system(cmd)
    logging.info(f"sbom written to {action_args.OUTPUT_SBOM_PATH}")

    set_readable(action_args.OUTPUT_SBOM_PATH)

    contents = compress_encode_file(action_args.OUTPUT_SBOM_PATH)
    set_github_output("artifact_sbom", contents)


def invoke_inspector_scan():
    logging.info(f"sending {action_args.OUTPUT_SBOM_PATH} to Amazon Inspector for vulnerability scan")
    cmd = f"aws inspector-scan scan-sbom --sbom file://{action_args.OUTPUT_SBOM_PATH} --output-format CYCLONE_DX_1_5 > {action_args.OUTPUT_INSPECTOR_SCAN_PATH}"
    print(cmd)
    ret = os.system(cmd)
    if ret != 0:
        logging.error(f"aws CLI command failed with error code: {ret}")
        sys.exit(1)
    logging.info(f"Inspector scan written to {action_args.OUTPUT_INSPECTOR_SCAN_PATH}")

    set_readable(action_args.OUTPUT_INSPECTOR_SCAN_PATH)

    contents = compress_encode_file(action_args.OUTPUT_INSPECTOR_SCAN_PATH)
    set_github_output("inspector_scan_results", contents)


def set_readable(filepath):
    # since our container runs as root, we need to
    # grant read access to other users so the Uploader Action
    # can successfully upload job artifacts
    # parent_dir = os.path.dirname(filepath)
    # os.system(f"chmod -R o+r {parent_dir}")
    os.system(f"chmod o+r {filepath}")


def compress_encode_file(file):
    contents = ""
    with open(file) as f:
        contents = f.read()

    compressed_contents = zlib.compress(contents.encode())
    encoded = base64.b64encode(compressed_contents).decode()
    return encoded


def set_github_output(key_name, data):
    # TODO: add some size checking
    os.system(f'echo "{key_name}={data}" >> "$GITHUB_OUTPUT"')


"""
TODO: fix sbom and scan permissions so the uploader works correctly
TODO: figure out how to set and get Action outputs
"""
