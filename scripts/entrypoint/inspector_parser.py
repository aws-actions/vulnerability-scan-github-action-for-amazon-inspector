import logging
import sys
import urllib.parse


class InspectorFinding:
    def __init__(self):
        self.package_names = []
        self.vulnerability_id = ""
        self.cvss_severity = ""
        self.cvss_score = ""
        self.installed_versions = []
        self.fixed_versions = []
        self.analysis_state = ""
        self.advisories = ""


def get_summarized_findings(inspector_scan_json):
    findings = get_findings(inspector_scan_json)
    vulnerabilities = get_vulnerabilities(findings)
    summarized_findings = []
    for vuln in vulnerabilities:
        finding = InspectorFinding()
        finding.cvss_severity, finding.cvss_score = get_cvss_severity(vuln)
        finding.vulnerability_id = get_vuln_id(vuln)
        finding.analysis_state = get_analysis_state(vuln)
        finding.advisories = get_advisories(vuln)

        affected_components = get_affected_components(vuln)
        for each_comp in affected_components:
            component = get_component(findings, each_comp)
            name, ver = get_component_name_version(component)
            finding.package_names.append(name)
            finding.installed_versions.append(ver)

            fixed_ver = get_fixed_version(vuln, each_comp)
            finding.fixed_versions.append(fixed_ver)

            summarized_findings.append(finding)

    return summarized_findings


def get_findings(inspector_scan_json):
    findings = inspector_scan_json.get("sbom")
    if findings is None:
        logging.warning("expected 'sbom' json object but it was not found")
        sys.exit(1)
    return findings


def get_vulnerabilities(findings_json):
    vulnerabilities = findings_json.get("vulnerabilities")
    if vulnerabilities is None:
        logging.warning("expected 'vulnerabilities' json object but it was not found")
        sys.exit(1)
    return vulnerabilities


def get_cvss_severity(vuln_json):
    ratings = vuln_json.get("ratings")
    if ratings is None:
        logging.warning("expected 'ratings' json object but it was not found")
        sys.exit(1)

    for rating in ratings:
        method = rating.get("method")
        if method is None:
            logging.warning("expected 'method' json object but it was not found")
            sys.exit(1)

        if method != "CVSSv31":
            continue
        severity = rating.get("severity")
        if severity is None:
            logging.warning("expected value from key 'severity' but received none")
            sys.exit(1)

        score = rating.get("score")
        if score is None:
            logging.warning("expected value from key 'severity' but received none")
            sys.exit(1)

    return severity, score


def get_vuln_id(vuln_json):
    vuln_id = vuln_json.get("id")
    if vuln_id is None:
        logging.warning("expected value from key 'id' but received none")
        sys.exit(1)
    return vuln_id


def get_analysis_state(vuln_json):
    analysis = vuln_json.get("analysis")
    if analysis is None:
        logging.warning("expected json object from key 'analysis' but received none")
        sys.exit(1)

    analysis_state = analysis.get("state")
    if analysis_state is None:
        logging.warning("expected value from key 'state' but received none")
        sys.exit(1)

    return analysis_state


def get_advisories(vuln_json):
    advisories = vuln_json.get("advisories")
    if advisories is None:
        logging.warning("expected value from key 'advisories' but received none")
        sys.exit(1)
    return advisories


def get_affected_components(vuln_json):
    affects = vuln_json.get("affects")
    if affects is None:
        logging.warning("expected value from key 'affects' but received none")
        sys.exit(1)

    affected_components = []
    for each in affects:
        component = each.get("ref")
        if component is None:
            logging.warning("expected value from key 'ref' but received none")
            sys.exit(1)
        affected_components.append(component)

    return affected_components


def get_component(findings_json, bom_ref):
    components = findings_json.get("components")
    if components is None:
        logging.warning("expected value from key 'components' but received none")
        sys.exit(1)

    for comp in components:
        ref = comp.get("bom-ref")
        if ref is None:
            logging.warning("expected value from key 'bom-ref' but received none")
            sys.exit(1)

        if bom_ref == ref:
            return comp


def get_component_name_version(comp_json):
    name = comp_json.get("name")
    if name is None:
        logging.warning("expected value from key 'name' but received none")
        sys.exit(1)
    name = urllib.parse.unquote(name)
    version = comp_json.get("version")
    if version == "":
        version = "unknown"
    version = urllib.parse.unquote(version)
    return name, version


def get_fixed_version(vuln_json, bom_ref):
    properties = vuln_json.get("properties")
    if properties is None:
        return "unknown"

    prop_namespace = "amazon:inspector:sbom_scanner:fixed_version:"
    for prop in properties:
        name = prop.get("name")
        if not prop_namespace in name:
            continue

        if not bom_ref in name:
            continue

        fixed_version = prop.get("value")
        if not fixed_version:
            return "unknown"
        fixed_version = urllib.parse.unquote(fixed_version)
        return fixed_version
