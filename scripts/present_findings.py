#!/usr/bin/env python3

import json
import logging
import os
import sys

output = {}


def parse_findings(findings_json):
    
    sbom = findings_json.get('sbom')
    if sbom is None:
        logging.error("expected root json object, 'sbom', but it was not found")
        return

    metadata = sbom.get('metadata')
    if metadata is None:
        logging.error("expected 'metadata' json object but it was not found")
        return
    props = metadata.get('properties')
    if props is None:
        logging.error("expected 'properties' json object but it was not found")
        return
    
    total_vulns = 0
    for prop in props: 
        if 'critical' in prop['name']:
            output['critical_vulnerabilities'] = prop['value']
            total_vulns += int(prop['value'])

        elif 'high' in prop['name']:
            output['high_vulnerabilities'] = prop['value']
            total_vulns += int(prop['value'])

        elif 'medium' in prop['name']:
            output['medium_vulnerabilities'] = prop['value']
            total_vulns += int(prop['value'])

        elif 'low' in prop['name']:
            output['low_vulnerabilities'] = prop['value']
            total_vulns += int(prop['value'])

        else:
            logging.warning("expected inspector:sbom_scanner property but received unknown property: ", prop)

        output['total_vulnerabilities'] = total_vulns


def main():
    input_file = sys.argv[1]
    logging.info(f"reading file: {input_file}")

    findings_json = ""
    with open(input_file, "r") as f:
        findings_json = json.load(f)

    parse_findings(findings_json)
    print(json.dumps(output, indent=4))

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
